services:
  api-gateway:
    profiles: ["service"]
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    image: td-api-gateway
    container_name: td-api-gateway
    hostname: ${API_GATEWAY_HOST}
    environment:
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
      - AUTH_SERVICE_URL=http://${AUTH_SERVICE_HOST}:${AUTH_SERVICE_PORT}
      - STAKEHOLDER_SERVICE_URL=http://${STAKEHOLDER_SERVICE_HOST}:${STAKEHOLDER_SERVICE_PORT}
      - TOUR_SERVICE_URL=http://${TOUR_SERVICE_HOST}:${TOUR_SERVICE_PORT}
      - BLOG_SERVICE_URL=http://${BLOG_SERVICE_HOST}:${BLOG_SERVICE_PORT}
      - REVIEW_SERVICE_URL=http://${REVIEW_SERVICE_HOST}:${REVIEW_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JAEGER_SERVICE_URL=http://${JAEGER_HOST}:4318/v1/traces
    depends_on:
      - jaeger
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"

  jaeger:
    profiles: ["service"]
    image: jaegertracing/all-in-one:1.73.0
    container_name: td-jaeger
    hostname: ${JAEGER_HOST}
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "${JAEGER_UI_EXT_PORT}:16686" # Jaeger UI
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:16686/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ELK Stack za centralizovani logging
  elasticsearch:
    profiles: ["monitoring"]
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: td-elasticsearch
    hostname: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    profiles: ["monitoring"]
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: td-logstash
    hostname: logstash
    volumes:
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "${LOGSTASH_PORT}:5000/tcp"
      - "${LOGSTASH_PORT}:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    profiles: ["monitoring"]
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: td-kibana
    hostname: kibana
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus za metrike
  prometheus:
    profiles: ["monitoring"]
    image: prom/prometheus:latest
    container_name: td-prometheus
    hostname: prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9090 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana za vizualizaciju metrika
  grafana:
    profiles: ["monitoring"]
    image: grafana/grafana:latest
    container_name: td-grafana
    hostname: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # cAdvisor za Docker kontejner metrike
  cadvisor:
    profiles: ["monitoring"]
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: td-cadvisor
    hostname: cadvisor
    ports:
      - "${CADVISOR_PORT}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter za host sistem metrike
  node-exporter:
    profiles: ["monitoring"]
    image: prom/node-exporter:latest
    container_name: td-node-exporter
    hostname: node-exporter
    ports:
      - "${NODE_EXPORTER_PORT}:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9100 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-db:
    profiles: ["db"]
    image: postgres:16-alpine
    container_name: td-auth-db
    hostname: ${AUTH_DB_HOST}
    environment:
      - POSTGRES_DB=${AUTH_DB_NAME}
      - POSTGRES_USER=${AUTH_DB_USER}
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}
    ports:
      - "${AUTH_DB_EXT_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER} -d ${AUTH_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  tour-db:
    profiles: ["db"]
    image: postgres:16-alpine
    container_name: td-tour-db
    hostname: ${TOUR_DB_HOST}
    environment:
      - POSTGRES_DB=${TOUR_DB_NAME}
      - POSTGRES_USER=${TOUR_DB_USER}
      - POSTGRES_PASSWORD=${TOUR_DB_PASSWORD}
    ports:
      - "${TOUR_DB_EXT_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TOUR_DB_USER} -d ${TOUR_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  follower-db:
    profiles: ["db"]
    image: neo4j:5.26-community
    container_name: td-follower-db
    hostname: ${FOLLOWER_DB_HOST}
    environment:
      - NEO4J_AUTH=${FOLLOWER_DB_USER}/${FOLLOWER_DB_PASSWORD}
      - NEO4J_dbms_default__database=${FOLLOWER_DB_NAME}
      #- NEO4J_dbms_connector_http_enabled=false  # Disable HTTP browser
      #- NEO4J_dbms_connector_https_enabled=false # Disable HTTPS browser
    ports:
      - "7474:7474"                                 # HTTP port (for Neo4j Browser)
      - "${FOLLOWER_DB_EXT_PORT}:7687"              # Bolt port
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u ${FOLLOWER_DB_USER} -p ${FOLLOWER_DB_PASSWORD} 'RETURN 1'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  blog-db:
    profiles: ["db"]
    image: mongo:7.0
    container_name: td-blog-db
    hostname: ${BLOG_DB_HOST}
    environment:
      - MONGO_INITDB_DATABASE=${BLOG_DB_NAME}
      - MONGO_INITDB_ROOT_USERNAME=${BLOG_DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${BLOG_DB_PASSWORD}
    ports:
      - "${BLOG_DB_EXT_PORT}:27017"

  stakeholder-db:
    profiles: ["db"]
    image: postgres:16-alpine
    container_name: td-stakeholder-db
    hostname: ${STAKEHOLDER_DB_HOST}
    environment:
      - POSTGRES_DB=${STAKEHOLDER_DB_NAME}
      - POSTGRES_USER=${STAKEHOLDER_DB_USER}
      - POSTGRES_PASSWORD=${STAKEHOLDER_DB_PASSWORD}
    ports:
      - "${STAKEHOLDER_DB_EXT_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${STAKEHOLDER_DB_USER} -d ${STAKEHOLDER_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  review-db:
    profiles: ["db"]
    image: postgres:16-alpine
    container_name: td-review-db
    hostname: ${REVIEW_DB_HOST}
    environment:
      - POSTGRES_DB=${REVIEW_DB_NAME}
      - POSTGRES_USER=${REVIEW_DB_USER}
      - POSTGRES_PASSWORD=${REVIEW_DB_PASSWORD}
    ports:
      - "${REVIEW_DB_EXT_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${REVIEW_DB_USER} -d ${REVIEW_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  purchase-db:
    profiles: ["db"]
    image: postgres:16-alpine
    container_name: td-purchase-db
    hostname: ${PURCHASE_DB_HOST}
    environment:
      - POSTGRES_DB=${PURCHASE_DB_NAME}
      - POSTGRES_USER=${PURCHASE_DB_USER}
      - POSTGRES_PASSWORD=${PURCHASE_DB_PASSWORD}
    ports:
      - "${PURCHASE_DB_EXT_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PURCHASE_DB_USER} -d ${PURCHASE_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth-service:
    profiles: ["service"]
    build:
      context: ./backend/auth
      dockerfile: Dockerfile
    image: td-auth-service
    container_name: td-auth-service
    hostname: ${AUTH_SERVICE_HOST}
    environment:
      - PORT=${AUTH_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - AUTH_DB_HOST=${AUTH_DB_HOST}
      - AUTH_DB_PORT=5432
      - AUTH_DB_NAME=${AUTH_DB_NAME}
      - AUTH_DB_USER=${AUTH_DB_USER}
      - AUTH_DB_PASSWORD=${AUTH_DB_PASSWORD}
      - FOLLOWER_SERVICE_URL=http://${FOLLOWER_SERVICE_HOST}:${FOLLOWER_SERVICE_PORT}
      - STAKEHOLDER_SERVICE_URL=http://${STAKEHOLDER_SERVICE_HOST}:${STAKEHOLDER_SERVICE_PORT}
      - LOGSTASH_PORT=${LOGSTASH_PORT}
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"

  follower-service:
    profiles: ["service"]
    build:
      context: ./backend/follower
      dockerfile: Dockerfile
    image: td-follower-service
    container_name: td-follower-service
    hostname: ${FOLLOWER_SERVICE_HOST}
    environment:
      - PORT=${FOLLOWER_SERVICE_PORT}
      - FOLLOWER_DB_HOST=${FOLLOWER_DB_HOST}
      - FOLLOWER_DB_PORT=7687
      - FOLLOWER_DB_USER=${FOLLOWER_DB_USER}
      - FOLLOWER_DB_PASSWORD=${FOLLOWER_DB_PASSWORD}
    ports:
      - "${FOLLOWER_SERVICE_PORT}:${FOLLOWER_SERVICE_PORT}"

  stakeholder-service:
    profiles: ["service"]
    build:
      context: ./backend/stakeholder
      dockerfile: Dockerfile
    image: td-stakeholder-service
    container_name: td-stakeholder-service
    hostname: ${STAKEHOLDER_SERVICE_HOST}
    environment:
      - PORT=${STAKEHOLDER_SERVICE_PORT}
      - STAKEHOLDER_DB_HOST=${STAKEHOLDER_DB_HOST}
      - STAKEHOLDER_DB_PORT=5432
      - STAKEHOLDER_DB_NAME=${STAKEHOLDER_DB_NAME}
      - STAKEHOLDER_DB_USER=${STAKEHOLDER_DB_USER}
      - STAKEHOLDER_DB_PASSWORD=${STAKEHOLDER_DB_PASSWORD}
    ports:
      - "${STAKEHOLDER_SERVICE_PORT}:${STAKEHOLDER_SERVICE_PORT}"

  tour-service:
    profiles: ["service"]
    build:
      context: ./backend/tour
      dockerfile: Dockerfile
    image: td-tour-service
    container_name: td-tour-service
    environment:
      - PORT=${TOUR_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - TOUR_DB_HOST=${TOUR_DB_HOST}
      - TOUR_DB_PORT=5432
      - TOUR_DB_NAME=${TOUR_DB_NAME}
      - TOUR_DB_USER=${TOUR_DB_USER}
      - TOUR_DB_PASSWORD=${TOUR_DB_PASSWORD}
    ports:
      - "${TOUR_SERVICE_PORT}:${TOUR_SERVICE_PORT}"

  blog-service:
    profiles: ["service"]
    build:
      context: ./backend/blog
      dockerfile: Dockerfile
    image: td-blog-service
    container_name: td-blog-service
    hostname: ${BLOG_SERVICE_HOST}
    environment:
      - PORT=${BLOG_SERVICE_PORT}
      - RPC_PORT=${RPC_PORT}
      - BLOG_DB_HOST=${BLOG_DB_HOST}
      - BLOG_DB_PORT=27017
      - BLOG_DB_NAME=${BLOG_DB_NAME}
      - BLOG_DB_USER=${BLOG_DB_USER}
      - BLOG_DB_PASSWORD=${BLOG_DB_PASSWORD}
      - FOLLOWER_SERVICE_URL=http://${FOLLOWER_SERVICE_HOST}:${FOLLOWER_SERVICE_PORT}
    ports:
      - "${BLOG_SERVICE_PORT}:${BLOG_SERVICE_PORT}"

  review-service:
    profiles: ["service"]
    build:
      context: ./backend/review
      dockerfile: Dockerfile
    image: td-review-service
    container_name: td-review-service
    hostname: ${REVIEW_SERVICE_HOST}
    environment:
      - PORT=${REVIEW_SERVICE_PORT}
      - REVIEW_DB_HOST=${REVIEW_DB_HOST}
      - REVIEW_DB_PORT=5432
      - REVIEW_DB_NAME=${REVIEW_DB_NAME}
      - REVIEW_DB_USER=${REVIEW_DB_USER}
      - REVIEW_DB_PASSWORD=${REVIEW_DB_PASSWORD}
    ports:
      - "${REVIEW_SERVICE_PORT}:${REVIEW_SERVICE_PORT}"

  purchase-service:
    profiles: ["service"]
    build:
      context: ./backend/purchase
      dockerfile: Dockerfile
    image: td-purchase-service
    container_name: td-purchase-service
    hostname: ${PURCHASE_SERVICE_HOST}
    environment:
      - PORT=${PURCHASE_SERVICE_PORT}
      - DB_HOST=${PURCHASE_DB_HOST}
      - DB_PORT=5432
      - DB_NAME=${PURCHASE_DB_NAME}
      - DB_USER=${PURCHASE_DB_USER}
      - DB_PASSWORD=${PURCHASE_DB_PASSWORD}
      - TOUR_SERVICE_URL=http://${TOUR_SERVICE_HOST}:${TOUR_SERVICE_PORT}
    ports:
      - "${PURCHASE_SERVICE_PORT}:${PURCHASE_SERVICE_PORT}"

  frontend:
    profiles: ["service"]
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: td-frontend
    container_name: td-frontend
    hostname: ${FRONTEND_HOST}
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://${API_GATEWAY_HOST}:${API_GATEWAY_PORT}
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      - api-gateway

  seed:
    profiles: ["service"]
    build:
      context: ./backend/seed
      dockerfile: Dockerfile
    image: td-seed
    container_name: td-seed
    environment:
      - AUTH_SERVICE_URL=http://${AUTH_SERVICE_HOST}:${AUTH_SERVICE_PORT}
      - FOLLOWER_SERVICE_URL=http://${FOLLOWER_SERVICE_HOST}:${FOLLOWER_SERVICE_PORT}
    depends_on:
      - auth-service
      - follower-service

volumes:
  elasticsearch-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local