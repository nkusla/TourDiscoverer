services:
  api-gateway:
    profiles: ["service"]
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    image: td-api-gateway
    container_name: td-api-gateway
    hostname: ${API_GATEWAY_HOST}
    environment:
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
      - AUTH_SERVICE_URL=http://${AUTH_SERVICE_HOST}:${AUTH_SERVICE_PORT}
      - STAKEHOLDER_SERVICE_URL=http://${STAKEHOLDER_SERVICE_HOST}:${STAKEHOLDER_SERVICE_PORT}
      - TOUR_SERVICE_URL=http://${TOUR_SERVICE_HOST}:${TOUR_SERVICE_PORT}
      - BLOG_SERVICE_URL=http://${BLOG_SERVICE_HOST}:${BLOG_SERVICE_PORT}
      - REVIEW_SERVICE_URL=http://${REVIEW_SERVICE_HOST}:${REVIEW_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JAEGER_SERVICE_URL=http://${JAEGER_HOST}:4318/v1/traces
    depends_on:
      - jaeger
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"

  jaeger:
    profiles: ["service"]
    image: jaegertracing/all-in-one:1.73.0
    container_name: td-jaeger
    hostname: ${JAEGER_HOST}
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "${JAEGER_UI_EXT_PORT}:16686" # Jaeger UI
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:16686/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-db:
    profiles: ["db"]
    image: postgres:16-alpine
    container_name: td-auth-db
    hostname: ${AUTH_DB_HOST}
    environment:
      - POSTGRES_DB=${AUTH_DB_NAME}
      - POSTGRES_USER=${AUTH_DB_USER}
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}
    ports:
      - "${AUTH_DB_EXT_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER} -d ${AUTH_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  tour-db:
    profiles: ["db"]
    image: postgres:16-alpine
    container_name: td-tour-db
    hostname: ${TOUR_DB_HOST}
    environment:
      - POSTGRES_DB=${TOUR_DB_NAME}
      - POSTGRES_USER=${TOUR_DB_USER}
      - POSTGRES_PASSWORD=${TOUR_DB_PASSWORD}
    ports:
      - "${TOUR_DB_EXT_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TOUR_DB_USER} -d ${TOUR_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  follower-db:
    profiles: ["db"]
    image: neo4j:5.26-community
    container_name: td-follower-db
    hostname: ${FOLLOWER_DB_HOST}
    environment:
      - NEO4J_AUTH=${FOLLOWER_DB_USER}/${FOLLOWER_DB_PASSWORD}
      - NEO4J_dbms_default__database=${FOLLOWER_DB_NAME}
      #- NEO4J_dbms_connector_http_enabled=false  # Disable HTTP browser
      #- NEO4J_dbms_connector_https_enabled=false # Disable HTTPS browser
    ports:
      - "7474:7474"                                 # HTTP port (for Neo4j Browser)
      - "${FOLLOWER_DB_EXT_PORT}:7687"              # Bolt port
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u ${FOLLOWER_DB_USER} -p ${FOLLOWER_DB_PASSWORD} 'RETURN 1'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  blog-db:
    profiles: ["db"]
    image: mongo:7.0
    container_name: td-blog-db
    hostname: ${BLOG_DB_HOST}
    environment:
      - MONGO_INITDB_DATABASE=${BLOG_DB_NAME}
      - MONGO_INITDB_ROOT_USERNAME=${BLOG_DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${BLOG_DB_PASSWORD}
    ports:
      - "${BLOG_DB_EXT_PORT}:27017"

  stakeholder-db:
    profiles: ["db"]
    image: postgres:16-alpine
    container_name: td-stakeholder-db
    hostname: ${STAKEHOLDER_DB_HOST}
    environment:
      - POSTGRES_DB=${STAKEHOLDER_DB_NAME}
      - POSTGRES_USER=${STAKEHOLDER_DB_USER}
      - POSTGRES_PASSWORD=${STAKEHOLDER_DB_PASSWORD}
    ports:
      - "${STAKEHOLDER_DB_EXT_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${STAKEHOLDER_DB_USER} -d ${STAKEHOLDER_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  review-db:
    profiles: ["db"]
    image: postgres:16-alpine
    container_name: td-review-db
    hostname: ${REVIEW_DB_HOST}
    environment:
      - POSTGRES_DB=${REVIEW_DB_NAME}
      - POSTGRES_USER=${REVIEW_DB_USER}
      - POSTGRES_PASSWORD=${REVIEW_DB_PASSWORD}
    ports:
      - "${REVIEW_DB_EXT_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${REVIEW_DB_USER} -d ${REVIEW_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth-service:
    profiles: ["service"]
    build:
      context: ./backend/auth
      dockerfile: Dockerfile
    image: td-auth-service
    container_name: td-auth-service
    hostname: ${AUTH_SERVICE_HOST}
    environment:
      - PORT=${AUTH_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - AUTH_DB_HOST=${AUTH_DB_HOST}
      - AUTH_DB_PORT=5432
      - AUTH_DB_NAME=${AUTH_DB_NAME}
      - AUTH_DB_USER=${AUTH_DB_USER}
      - AUTH_DB_PASSWORD=${AUTH_DB_PASSWORD}
      - FOLLOWER_SERVICE_URL=http://${FOLLOWER_SERVICE_HOST}:${FOLLOWER_SERVICE_PORT}
      - STAKEHOLDER_SERVICE_URL=http://${STAKEHOLDER_SERVICE_HOST}:${STAKEHOLDER_SERVICE_PORT}
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"

  follower-service:
    profiles: ["service"]
    build:
      context: ./backend/follower
      dockerfile: Dockerfile
    image: td-follower-service
    container_name: td-follower-service
    hostname: ${FOLLOWER_SERVICE_HOST}
    environment:
      - PORT=${FOLLOWER_SERVICE_PORT}
      - FOLLOWER_DB_HOST=${FOLLOWER_DB_HOST}
      - FOLLOWER_DB_PORT=7687
      - FOLLOWER_DB_USER=${FOLLOWER_DB_USER}
      - FOLLOWER_DB_PASSWORD=${FOLLOWER_DB_PASSWORD}
    ports:
      - "${FOLLOWER_SERVICE_PORT}:${FOLLOWER_SERVICE_PORT}"

  stakeholder-service:
    profiles: ["service"]
    build:
      context: ./backend/stakeholder
      dockerfile: Dockerfile
    image: td-stakeholder-service
    container_name: td-stakeholder-service
    hostname: ${STAKEHOLDER_SERVICE_HOST}
    environment:
      - PORT=${STAKEHOLDER_SERVICE_PORT}
      - STAKEHOLDER_DB_HOST=${STAKEHOLDER_DB_HOST}
      - STAKEHOLDER_DB_PORT=5432
      - STAKEHOLDER_DB_NAME=${STAKEHOLDER_DB_NAME}
      - STAKEHOLDER_DB_USER=${STAKEHOLDER_DB_USER}
      - STAKEHOLDER_DB_PASSWORD=${STAKEHOLDER_DB_PASSWORD}
    ports:
      - "${STAKEHOLDER_SERVICE_PORT}:${STAKEHOLDER_SERVICE_PORT}"

  tour-service:
    profiles: ["service"]
    build:
      context: ./backend/tour
      dockerfile: Dockerfile
    image: td-tour-service
    container_name: td-tour-service
    environment:
      - PORT=${TOUR_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - TOUR_DB_HOST=${TOUR_DB_HOST}
      - TOUR_DB_PORT=5432
      - TOUR_DB_NAME=${TOUR_DB_NAME}
      - TOUR_DB_USER=${TOUR_DB_USER}
      - TOUR_DB_PASSWORD=${TOUR_DB_PASSWORD}
    ports:
      - "${TOUR_SERVICE_PORT}:${TOUR_SERVICE_PORT}"

  blog-service:
    profiles: ["service"]
    build:
      context: ./backend/blog
      dockerfile: Dockerfile
    image: td-blog-service
    container_name: td-blog-service
    hostname: ${BLOG_SERVICE_HOST}
    environment:
      - PORT=${BLOG_SERVICE_PORT}
      - BLOG_DB_HOST=${BLOG_DB_HOST}
      - BLOG_DB_PORT=27017
      - BLOG_DB_NAME=${BLOG_DB_NAME}
      - BLOG_DB_USER=${BLOG_DB_USER}
      - BLOG_DB_PASSWORD=${BLOG_DB_PASSWORD}
      - FOLLOWER_SERVICE_URL=http://${FOLLOWER_SERVICE_HOST}:${FOLLOWER_SERVICE_PORT}
    ports:
      - "${BLOG_SERVICE_PORT}:${BLOG_SERVICE_PORT}"

  review-service:
    profiles: ["service"]
    build:
      context: ./backend/review
      dockerfile: Dockerfile
    image: td-review-service
    container_name: td-review-service
    hostname: ${REVIEW_SERVICE_HOST}
    environment:
      - PORT=${REVIEW_SERVICE_PORT}
      - REVIEW_DB_HOST=${REVIEW_DB_HOST}
      - REVIEW_DB_PORT=5432
      - REVIEW_DB_NAME=${REVIEW_DB_NAME}
      - REVIEW_DB_USER=${REVIEW_DB_USER}
      - REVIEW_DB_PASSWORD=${REVIEW_DB_PASSWORD}
    ports:
      - "${REVIEW_SERVICE_PORT}:${REVIEW_SERVICE_PORT}"

  frontend:
    profiles: ["service"]
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: td-frontend
    container_name: td-frontend
    hostname: ${FRONTEND_HOST}
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://${API_GATEWAY_HOST}:${API_GATEWAY_PORT}
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      - api-gateway

  seed:
    profiles: ["service"]
    build:
      context: ./backend/seed
      dockerfile: Dockerfile
    image: td-seed
    container_name: td-seed
    environment:
      - AUTH_SERVICE_URL=http://${AUTH_SERVICE_HOST}:${AUTH_SERVICE_PORT}
      - FOLLOWER_SERVICE_URL=http://${FOLLOWER_SERVICE_HOST}:${FOLLOWER_SERVICE_PORT}
    depends_on:
      - auth-service
      - follower-service